acc.pca.simu.1,acc.pca.simu.2,acc.pca.simu.3,acc.pca.simu.4,
acc.pca.t.simu.1,acc.pca.t.simu.2,acc.pca.t.simu.3,acc.umap.t.simu.4,
acc.eigen.simu.1,acc.eigen.simu.2,acc.eigen.simu.3,acc.eigen.simu.4,
acc.eigen.t.simu.1,acc.eigen.t.simu.2,acc.eigen.t.simu.3,acc.eigen.t.simu.4,
acc.df.simu.1,acc.df.simu.2,acc.df.simu.3,acc.df.simu.4,
acc.df.t.simu.1,acc.df.t.simu.2,acc.df.t.simu.3,acc.df.t.simu.4,
acc.ndf.simu.1,acc.ndf.simu.2,acc.ndf.simu.3,acc.ndf.simu.4,
acc.ndf.t.simu.1,acc.ndf.t.simu.2,acc.ndf.t.simu.3,acc.ndf.t.simu.4)
print(k)
}
acc.100.30 <- acc
write.csv(acc.100.30, file = "/Users/djlin/Desktop/Simu.100.30.csv", row.names = FALSE)
###########################LOAD THE DATA###############################################
######Classification model generator####
CMG <- function(n,p){
pi <- 0.5
sigma <- sqrt(0.5)
tau <- sqrt(1)
mu <- 2
#n=100,200,300,500,800
n <- n
#p=5,10
pl <- p
pr <- 10
#d = 2
dl <- dr <- d <- 2
#Generate Y and X
Y <- rbinom(n = n,size = 1,prob = pi)
X <- array(data = NA,dim = pl*pr)
for (i in 1:n) {
if (Y[i] == 0) {
mean1 <- array(data = 0,dim = pl*pr)
Sigma1 <- diag(array(data = 1,dim = pl*pr))
Sigma1[2,2] <- sigma^2
Sigma1[p+1,p+1] <- sigma^2
X <- cbind(X,mvrnorm(n = 1,mu = matrix(mean1),Sigma = Sigma1))
} else if (Y[i] == 1) {
mean2 <- array(data = 0,dim = pl*pr)
mean2[1] <- mu; mean2[p+2] <- mu
Sigma2 <- diag(array(data = 1,dim = pl*pr))
Sigma2[2,2] <- tau^2
Sigma2[p+1,p+1] <- tau^2
X <- cbind(X,mvrnorm(n = 1,mu = matrix(mean2),Sigma = Sigma2))
}
}
######
X <- X[,2:(n+1)] #X is a p^2*n matrix, with each column is vec(X_i)
X[1,] <- X[1,]*X[(p+2),]
X[2,] <- X[2,]^3+X[(p+1),]^3
#X[1,] <- sign(X[1,])*(abs(X[1,])^(3))
#X[(p+2),] <- sign(X[(p+2),])*(abs(X[(p+2),])^(3))
Y <- Y #Y is a 0-1 number
return(list("X" = X,"Y" = Y))
}
iteration <- 50
acc <- matrix(data = 0,nrow = iteration,ncol = 48)
for (k in 1:iteration) {
##########Dimension Folding with n=50 and p=10 ######
#Model Generating
tra <- CMG(n = 100,p = 2)
X.tra <- tra$X
Y.tra <- tra$Y
tes <- CMG(n = 50,p = 2)
X.tes <- tes$X
Y.tes <- tes$Y
X.tra <- t(X.tra)
X.tes <- t(X.tes)
##############################################################################################
#####PCA###########
PCA.classifier <- function(X.train,Y.train,X.test,Y.test,k){
ntr <- ncol(X.train)
nte <- ncol(X.test)
X <- cbind(X.train,X.test)
a <- prcomp(t(X))$x[,1:4]
predicted_labels <- knn(train = a[1:ntr,], test = a[(ntr+1):(ntr+nte),], cl = Y.train, k = k)
acc <- sum(predicted_labels == Y.test)/length(Y.test)
return(acc)
}
acc.pca.simu.1 <- PCA.classifier(X.train = t(X.tra),Y.train = Y.tra,X.test = t(X.tra),Y.test = Y.tra,k = 10)
acc.pca.simu.2 <- PCA.classifier(X.train = t(X.tra),Y.train = Y.tra,X.test = t(X.tra),Y.test = Y.tra,k = 20)
acc.pca.simu.3 <- PCA.classifier(X.train = t(X.tra),Y.train = Y.tra,X.test = t(X.tra),Y.test = Y.tra,k = 40)
acc.pca.simu.4 <- PCA.classifier(X.train = t(X.tra),Y.train = Y.tra,X.test = t(X.tra),Y.test = Y.tra,k = 80)
acc.pca.t.simu.1 <- PCA.classifier(X.train = t(X.tra),Y.train = Y.tra,X.test = t(X.tes),Y.test = Y.tes,k = 10)
acc.pca.t.simu.2 <- PCA.classifier(X.train = t(X.tra),Y.train = Y.tra,X.test = t(X.tes),Y.test = Y.tes,k = 20)
acc.pca.t.simu.3 <- PCA.classifier(X.train = t(X.tra),Y.train = Y.tra,X.test = t(X.tes),Y.test = Y.tes,k = 40)
acc.pca.t.simu.4 <- PCA.classifier(X.train = t(X.tra),Y.train = Y.tra,X.test = t(X.tes),Y.test = Y.tes,k = 80)
####UMAP##########
UMAP.classifier <- function(X.train,Y.train,X.test,Y.test,k){
ntr <- ncol(X.train)
nte <- ncol(X.test)
X <- cbind(X.train,X.test)
a <- umap(t(X))$layout
predicted_labels <- knn(train = a[1:ntr,], test = a[(ntr+1):(ntr+nte),], cl = Y.train, k = k)
acc3 <- sum(Y.test==predicted_labels)/length(Y.test)
return(acc3)
}
acc.umap.simu.1 <- UMAP.classifier(X.train = t(X.tra),Y.train = Y.tra,X.test = t(X.tra),Y.test = Y.tra,k = 10)
acc.umap.simu.2 <- UMAP.classifier(X.train = t(X.tra),Y.train = Y.tra,X.test = t(X.tra),Y.test = Y.tra,k = 20)
acc.umap.simu.3 <- UMAP.classifier(X.train = t(X.tra),Y.train = Y.tra,X.test = t(X.tra),Y.test = Y.tra,k = 40)
acc.umap.simu.4 <- UMAP.classifier(X.train = t(X.tra),Y.train = Y.tra,X.test = t(X.tra),Y.test = Y.tra,k = 80)
acc.umap.t.simu.1 <- UMAP.classifier(X.train = t(X.tra),Y.train = Y.tra,X.test = t(X.tes),Y.test = Y.tes,k = 10)
acc.umap.t.simu.2 <- UMAP.classifier(X.train = t(X.tra),Y.train = Y.tra,X.test = t(X.tes),Y.test = Y.tes,k = 20)
acc.umap.t.simu.3 <- UMAP.classifier(X.train = t(X.tra),Y.train = Y.tra,X.test = t(X.tes),Y.test = Y.tes,k = 40)
acc.umap.t.simu.4 <- UMAP.classifier(X.train = t(X.tra),Y.train = Y.tra,X.test = t(X.tes),Y.test = Y.tes,k = 80)
#######TSNE###############
TSNE.classifier<- function(X.train,Y.train,X.test,Y.test,k){
a <- Rtsne(X = t(X.train),dims = 2)$Y
predicted_labels <- knn(train = a, test = a, cl = Y.train, k = k)
return(sum(Y.test==predicted_labels)/length(Y.test))
}
acc.tsne.simu.1 <- TSNE.classifier(X.train = t(X.tra),Y.train = Y.tra,X.test = t(X.tra),Y.test = Y.tra,k = 10)
acc.tsne.simu.2 <- TSNE.classifier(X.train = t(X.tra),Y.train = Y.tra,X.test = t(X.tra),Y.test = Y.tra,k = 20)
acc.tsne.simu.3 <- TSNE.classifier(X.train = t(X.tra),Y.train = Y.tra,X.test = t(X.tra),Y.test = Y.tra,k = 40)
acc.tsne.simu.4 <- TSNE.classifier(X.train = t(X.tra),Y.train = Y.tra,X.test = t(X.tra),Y.test = Y.tra,k = 80)
TSNE.classifier.t <- function(X.train,Y.train,X.test,Y.test,k){
ntr <- ncol(X.train)
nte <- ncol(X.test)
X <- cbind(X.train,X.test)
a <- Rtsne(X = t(X),dims = 2)$Y
predicted_labels <- knn(train = a[1:ntr,], test = a[(ntr+1):(ntr+nte),], cl = Y.train, k = k)
return(sum(Y.test==predicted_labels)/length(Y.test))
}
acc.tsne.t.simu.1 <- TSNE.classifier.t(X.train = t(X.tra),Y.train = Y.tra,X.test = t(X.tes),Y.test = Y.tes,k = 10)
acc.tsne.t.simu.2 <- TSNE.classifier.t(X.train = t(X.tra),Y.train = Y.tra,X.test = t(X.tes),Y.test = Y.tes,k = 20)
acc.tsne.t.simu.3 <- TSNE.classifier.t(X.train = t(X.tra),Y.train = Y.tra,X.test = t(X.tes),Y.test = Y.tes,k = 40)
acc.tsne.t.simu.4 <- TSNE.classifier.t(X.train = t(X.tra),Y.train = Y.tra,X.test = t(X.tes),Y.test = Y.tes,k = 80)
#######EIGENMAP##############
Eigenmaps.classifier <- function(X.train,Y.train,X.test,Y.test,k){
ntr <- ncol(X.train)
nte <- ncol(X.test)
X <- cbind(X.train,X.test)
a <- do.lapeig(X =t(X),ndim = 4)$Y
predicted_labels <- knn(train = a[1:ntr,], test = a[(ntr+1):(ntr+nte),], cl = Y.train, k = k)
#predicted_labels <- knn(train = a[1:ntr,], test = a[1:ntr,], cl = Y.train, k = k)
return(sum(Y.test==predicted_labels)/length(Y.test))
}
acc.eigen.simu.1 <- Eigenmaps.classifier(X.train = t(X.tra),Y.train = Y.tra,X.test = t(X.tra),Y.test = Y.tra,k = 10)
acc.eigen.simu.2 <- Eigenmaps.classifier(X.train = t(X.tra),Y.train = Y.tra,X.test = t(X.tra),Y.test = Y.tra,k = 20)
acc.eigen.simu.3 <- Eigenmaps.classifier(X.train = t(X.tra),Y.train = Y.tra,X.test = t(X.tra),Y.test = Y.tra,k = 40)
acc.eigen.simu.4 <- Eigenmaps.classifier(X.train = t(X.tra),Y.train = Y.tra,X.test = t(X.tra),Y.test = Y.tra,k = 80)
acc.eigen.t.simu.1 <- Eigenmaps.classifier(X.train = t(X.tra),Y.train = Y.tra,X.test = t(X.tes),Y.test = Y.tes,k = 10)
acc.eigen.t.simu.2 <- Eigenmaps.classifier(X.train = t(X.tra),Y.train = Y.tra,X.test = t(X.tes),Y.test = Y.tes,k = 20)
acc.eigen.t.simu.3 <- Eigenmaps.classifier(X.train = t(X.tra),Y.train = Y.tra,X.test = t(X.tes),Y.test = Y.tes,k = 40)
acc.eigen.t.simu.4 <- Eigenmaps.classifier(X.train = t(X.tra),Y.train = Y.tra,X.test = t(X.tes),Y.test = Y.tes,k = 80)
########DIMENSION FOLDING#####
DF.classifier <- function(X.train,Y.train,X.test,Y.test,index,p,h,epsilon,iteration,pl,pr,dl,dr,k){
result <- df(X = X.train,Y = Y.train,index = index,p = p,h = h,epsilon = epsilon,iteration = iteration,pl = pl,pr = pr,dl = dl,dr = dr)
a <- result[[1]]
b <- result[[2]]
f <- result[[3]]
#####KNN######
Xn.test1 <- matrix(data = 0,nrow = dl*dr,ncol = ncol(X.test))
for (i in 1:ncol(Xn.test1)) {
Xn.test1[,i] <- matrix(data = t(a)%*%matrix(X.test[,i],nrow = pl,ncol = pr)%*%b,nrow = dl*dr)
}
Xn.train1 <- matrix(data = 0,nrow = dl*dr,ncol = ncol(X.train))
for (i in 1:ncol(Xn.train1)) {
Xn.train1[,i] <- matrix(data = t(a)%*%matrix(X.train[,i],nrow = pl,ncol = pr)%*%b,nrow = dl*dr)
}
predicted_labels.df <- knn(train = t(Xn.train1), test = t(Xn.test1), cl = Y.train, k = k)
#print(predicted_labels.df)
return(sum(Y.test==predicted_labels.df)/length(Y.test))
}
######
pl <- 2
pr <- 10
dl <- 2
dr <- 2
h <- 2
p.t <- array(data = 0,dim = h)
index <- list()
for (i in 0:1) {
p.t[i+1] <- sum(Y.tra==i)/length(Y.tra)
index[[i+1]] <- which(Y.tra== i)
}
epsilon <- 1e-9
acc.df.simu.1 <- DF.classifier(X.train = t(X.tra),Y.train = Y.tra,X.test = t(X.tra),Y.test = Y.tra,
index = index,p = p.t,h = h,epsilon = epsilon,iteration = 1000,
pl = pl,pr = pr,dl = dl,dr = dr,k=10)
acc.df.simu.2 <- DF.classifier(X.train = t(X.tra),Y.train = Y.tra,X.test = t(X.tra),Y.test = Y.tra,
index = index,p = p.t,h = h,epsilon = epsilon,iteration = 1000,
pl = pl,pr = pr,dl = dl,dr = dr,k=20)
acc.df.simu.3 <- DF.classifier(X.train = t(X.tra),Y.train = Y.tra,X.test = t(X.tra),Y.test = Y.tra,
index = index,p = p.t,h = h,epsilon = epsilon,iteration = 1000,
pl = pl,pr = pr,dl = dl,dr = dr,k=40)
acc.df.simu.4 <- DF.classifier(X.train = t(X.tra),Y.train = Y.tra,X.test = t(X.tra),Y.test = Y.tra,
index = index,p = p.t,h = h,epsilon = epsilon,iteration = 1000,
pl = pl,pr = pr,dl = dl,dr = dr,k=80)
acc.df.t.simu.1 <- DF.classifier(X.train = t(X.tra),Y.train = Y.tra,X.test = t(X.tes),Y.test = Y.tes,
index = index,p = p.t,h = h,epsilon = epsilon,iteration = 1000,
pl = pl,pr = pr,dl = dl,dr = dr,k=10)
acc.df.t.simu.2 <- DF.classifier(X.train = t(X.tra),Y.train = Y.tra,X.test = t(X.tes),Y.test = Y.tes,
index = index,p = p.t,h = h,epsilon = epsilon,iteration = 1000,
pl = pl,pr = pr,dl = dl,dr = dr,k=20)
acc.df.t.simu.3 <- DF.classifier(X.train = t(X.tra),Y.train = Y.tra,X.test = t(X.tes),Y.test = Y.tes,
index = index,p = p.t,h = h,epsilon = epsilon,iteration = 1000,
pl = pl,pr = pr,dl = dl,dr = dr,k=40)
acc.df.t.simu.4 <- DF.classifier(X.train = t(X.tra),Y.train = Y.tra,X.test = t(X.tes),Y.test = Y.tes,
index = index,p = p.t,h = h,epsilon = epsilon,iteration = 1000,
pl = pl,pr = pr,dl = dl,dr = dr,k=80)
########NONLINEAR DIMENSION FOLDING#################
pl <- 2
pr <- 10
dl <- 2
dr <- 2
re <- KernelGenerator(X = t(X.tra)[,1:20],Y = Y.tra[1:20],pl = pl,pr = pr,dl = dl,dr = dr,
thre = 0.01,iteration = 10,kernel.u = "gaussian",kernel.v = "gaussian",kernel.Y = "discrete")
A <- re$A
Gy <- re$Gy
Gu <- re$Gu
Gv <- re$Gv
epsilon_x <- 10^seq(-10,-4,1)
gcv_x <- array(data = 0,dim = length(epsilon_x))
for (i in 1:length(epsilon_x)) {
gcv_x[i] <- gcvx(As = A,GY = Gy,epsilon_x = epsilon_x[i])
}
epsilon.x <- epsilon_x[which.min(gcv_x)]
epsilon_u <- 10^seq(-3,1,0.5)
epsilon_v <- 10^seq(-3,1,0.5)
gcv_uv <- matrix(data = 0,nrow = length(epsilon_u),ncol = length(epsilon_v))
for (i in 1:length(epsilon_u)) {
for (j in 1:length(epsilon_v)) {
gcv_uv[i,j] <- gcvuv(As = A,Gu = Gu,Gv = Gv,GY = Gy,epsilon_x = epsilon.x,epsilon_u = epsilon_u[i],epsilon_v = epsilon_v[j])
}
}
epsilon.u <- epsilon_u[which(gcv_uv == min(gcv_uv), arr.ind = TRUE)[1]]
epsilon.v <- epsilon_v[which(gcv_uv == min(gcv_uv), arr.ind = TRUE)[2]]
###################################Classification##########################################
res <- NSPGSIR(X = t(X.tra) ,Y = Y.tra,pl = pl,pr = pr,dl = dl,dr = dr,
thre = 0.001,iteration = 10,kernel.u = "gaussian",kernel.v = "gaussian",kernel.Y = "discrete",
epsilon_u = epsilon.u,epsilon_v = epsilon.v,epsilon_x = epsilon.v)
f <- res$f
g <- res$g
X.train.d <- NSPGSIR.predict(X = t(X.tra),Y = Y.tra,X.new = t(X.tra),
pl = pl,pr = pr,dl = dl,dr = dr,f = f,g = g)
X.test.d <- NSPGSIR.predict(X = t(X.tra),Y = Y.tra,X.new = t(X.tes),
pl = pl,pr = pr,dl = dl,dr = dr,f = f,g = g)
label1 <- knn(train = t(X.train.d),test = t(X.train.d),cl = Y.tra,k = 10)
acc.ndf.simu.1 <- sum(label1 == Y.tra)/length(Y.tra)
label2 <- knn(train = t(X.train.d),test = t(X.train.d),cl = Y.tra,k = 20)
acc.ndf.simu.2 <- sum(label2 == Y.tra)/length(Y.tra)
label3 <- knn(train = t(X.train.d),test = t(X.train.d),cl = Y.tra,k = 40)
acc.ndf.simu.3 <- sum(label3 == Y.tra)/length(Y.tra)
label4 <- knn(train = t(X.train.d),test = t(X.train.d),cl = Y.tra,k = 80)
acc.ndf.simu.4 <- sum(label4 == Y.tra)/length(Y.tra)
label1.t <- knn(train = t(X.train.d),test = t(X.test.d),cl = Y.tra,k = 10)
acc.ndf.t.simu.1 <- sum(label1.t == Y.tes)/length(Y.tes)
label2.t <- knn(train = t(X.train.d),test = t(X.test.d),cl = Y.tra,k = 20)
acc.ndf.t.simu.2 <- sum(label2.t == Y.tes)/length(Y.tes)
label3.t <- knn(train = t(X.train.d),test = t(X.test.d),cl = Y.tra,k = 40)
acc.ndf.t.simu.3 <- sum(label3.t == Y.tes)/length(Y.tes)
label4.t <- knn(train = t(X.train.d),test = t(X.test.d),cl = Y.tra,k = 80)
acc.ndf.t.simu.4 <- sum(label4.t == Y.tes)/length(Y.tes)
acc[k,] <- c(acc.umap.simu.1,acc.umap.simu.2,acc.umap.simu.3,acc.umap.simu.4,
acc.umap.t.simu.1,acc.umap.t.simu.2,acc.umap.t.simu.3,acc.umap.t.simu.4,
acc.tsne.simu.1,acc.tsne.simu.2,acc.tsne.simu.3,acc.tsne.simu.4,
acc.tsne.t.simu.1,acc.tsne.t.simu.2,acc.tsne.t.simu.3,acc.tsne.t.simu.4,
acc.pca.simu.1,acc.pca.simu.2,acc.pca.simu.3,acc.pca.simu.4,
acc.pca.t.simu.1,acc.pca.t.simu.2,acc.pca.t.simu.3,acc.umap.t.simu.4,
acc.eigen.simu.1,acc.eigen.simu.2,acc.eigen.simu.3,acc.eigen.simu.4,
acc.eigen.t.simu.1,acc.eigen.t.simu.2,acc.eigen.t.simu.3,acc.eigen.t.simu.4,
acc.df.simu.1,acc.df.simu.2,acc.df.simu.3,acc.df.simu.4,
acc.df.t.simu.1,acc.df.t.simu.2,acc.df.t.simu.3,acc.df.t.simu.4,
acc.ndf.simu.1,acc.ndf.simu.2,acc.ndf.simu.3,acc.ndf.simu.4,
acc.ndf.t.simu.1,acc.ndf.t.simu.2,acc.ndf.t.simu.3,acc.ndf.t.simu.4)
print(k)
}
acc.100.10 <- acc
write.csv(acc.100.10, file = "/Users/djlin/Desktop/Simu.100.30.csv", row.names = FALSE)
write.csv(acc.100.10, file = "/Users/djlin/Desktop/Simu.100.10.csv", row.names = FALSE)
write.csv(acc.100.30, file = "/Users/djlin/Desktop/Simu.100.10.csv", row.names = FALSE)
iteration <- 50
acc <- matrix(data = 0,nrow = iteration,ncol = 48)
for (k in 1:iteration) {
##########Dimension Folding with n=50 and p=10 ######
#Model Generating
tra <- CMG(n = 200,p = 2)
X.tra <- tra$X
Y.tra <- tra$Y
tes <- CMG(n = 50,p = 2)
X.tes <- tes$X
Y.tes <- tes$Y
X.tra <- t(X.tra)
X.tes <- t(X.tes)
##############################################################################################
#####PCA###########
PCA.classifier <- function(X.train,Y.train,X.test,Y.test,k){
ntr <- ncol(X.train)
nte <- ncol(X.test)
X <- cbind(X.train,X.test)
a <- prcomp(t(X))$x[,1:4]
predicted_labels <- knn(train = a[1:ntr,], test = a[(ntr+1):(ntr+nte),], cl = Y.train, k = k)
acc <- sum(predicted_labels == Y.test)/length(Y.test)
return(acc)
}
acc.pca.simu.1 <- PCA.classifier(X.train = t(X.tra),Y.train = Y.tra,X.test = t(X.tra),Y.test = Y.tra,k = 10)
acc.pca.simu.2 <- PCA.classifier(X.train = t(X.tra),Y.train = Y.tra,X.test = t(X.tra),Y.test = Y.tra,k = 20)
acc.pca.simu.3 <- PCA.classifier(X.train = t(X.tra),Y.train = Y.tra,X.test = t(X.tra),Y.test = Y.tra,k = 40)
acc.pca.simu.4 <- PCA.classifier(X.train = t(X.tra),Y.train = Y.tra,X.test = t(X.tra),Y.test = Y.tra,k = 80)
acc.pca.t.simu.1 <- PCA.classifier(X.train = t(X.tra),Y.train = Y.tra,X.test = t(X.tes),Y.test = Y.tes,k = 10)
acc.pca.t.simu.2 <- PCA.classifier(X.train = t(X.tra),Y.train = Y.tra,X.test = t(X.tes),Y.test = Y.tes,k = 20)
acc.pca.t.simu.3 <- PCA.classifier(X.train = t(X.tra),Y.train = Y.tra,X.test = t(X.tes),Y.test = Y.tes,k = 40)
acc.pca.t.simu.4 <- PCA.classifier(X.train = t(X.tra),Y.train = Y.tra,X.test = t(X.tes),Y.test = Y.tes,k = 80)
####UMAP##########
UMAP.classifier <- function(X.train,Y.train,X.test,Y.test,k){
ntr <- ncol(X.train)
nte <- ncol(X.test)
X <- cbind(X.train,X.test)
a <- umap(t(X))$layout
predicted_labels <- knn(train = a[1:ntr,], test = a[(ntr+1):(ntr+nte),], cl = Y.train, k = k)
acc3 <- sum(Y.test==predicted_labels)/length(Y.test)
return(acc3)
}
acc.umap.simu.1 <- UMAP.classifier(X.train = t(X.tra),Y.train = Y.tra,X.test = t(X.tra),Y.test = Y.tra,k = 10)
acc.umap.simu.2 <- UMAP.classifier(X.train = t(X.tra),Y.train = Y.tra,X.test = t(X.tra),Y.test = Y.tra,k = 20)
acc.umap.simu.3 <- UMAP.classifier(X.train = t(X.tra),Y.train = Y.tra,X.test = t(X.tra),Y.test = Y.tra,k = 40)
acc.umap.simu.4 <- UMAP.classifier(X.train = t(X.tra),Y.train = Y.tra,X.test = t(X.tra),Y.test = Y.tra,k = 80)
acc.umap.t.simu.1 <- UMAP.classifier(X.train = t(X.tra),Y.train = Y.tra,X.test = t(X.tes),Y.test = Y.tes,k = 10)
acc.umap.t.simu.2 <- UMAP.classifier(X.train = t(X.tra),Y.train = Y.tra,X.test = t(X.tes),Y.test = Y.tes,k = 20)
acc.umap.t.simu.3 <- UMAP.classifier(X.train = t(X.tra),Y.train = Y.tra,X.test = t(X.tes),Y.test = Y.tes,k = 40)
acc.umap.t.simu.4 <- UMAP.classifier(X.train = t(X.tra),Y.train = Y.tra,X.test = t(X.tes),Y.test = Y.tes,k = 80)
#######TSNE###############
TSNE.classifier<- function(X.train,Y.train,X.test,Y.test,k){
a <- Rtsne(X = t(X.train),dims = 2)$Y
predicted_labels <- knn(train = a, test = a, cl = Y.train, k = k)
return(sum(Y.test==predicted_labels)/length(Y.test))
}
acc.tsne.simu.1 <- TSNE.classifier(X.train = t(X.tra),Y.train = Y.tra,X.test = t(X.tra),Y.test = Y.tra,k = 10)
acc.tsne.simu.2 <- TSNE.classifier(X.train = t(X.tra),Y.train = Y.tra,X.test = t(X.tra),Y.test = Y.tra,k = 20)
acc.tsne.simu.3 <- TSNE.classifier(X.train = t(X.tra),Y.train = Y.tra,X.test = t(X.tra),Y.test = Y.tra,k = 40)
acc.tsne.simu.4 <- TSNE.classifier(X.train = t(X.tra),Y.train = Y.tra,X.test = t(X.tra),Y.test = Y.tra,k = 80)
TSNE.classifier.t <- function(X.train,Y.train,X.test,Y.test,k){
ntr <- ncol(X.train)
nte <- ncol(X.test)
X <- cbind(X.train,X.test)
a <- Rtsne(X = t(X),dims = 2)$Y
predicted_labels <- knn(train = a[1:ntr,], test = a[(ntr+1):(ntr+nte),], cl = Y.train, k = k)
return(sum(Y.test==predicted_labels)/length(Y.test))
}
acc.tsne.t.simu.1 <- TSNE.classifier.t(X.train = t(X.tra),Y.train = Y.tra,X.test = t(X.tes),Y.test = Y.tes,k = 10)
acc.tsne.t.simu.2 <- TSNE.classifier.t(X.train = t(X.tra),Y.train = Y.tra,X.test = t(X.tes),Y.test = Y.tes,k = 20)
acc.tsne.t.simu.3 <- TSNE.classifier.t(X.train = t(X.tra),Y.train = Y.tra,X.test = t(X.tes),Y.test = Y.tes,k = 40)
acc.tsne.t.simu.4 <- TSNE.classifier.t(X.train = t(X.tra),Y.train = Y.tra,X.test = t(X.tes),Y.test = Y.tes,k = 80)
#######EIGENMAP##############
Eigenmaps.classifier <- function(X.train,Y.train,X.test,Y.test,k){
ntr <- ncol(X.train)
nte <- ncol(X.test)
X <- cbind(X.train,X.test)
a <- do.lapeig(X =t(X),ndim = 4)$Y
predicted_labels <- knn(train = a[1:ntr,], test = a[(ntr+1):(ntr+nte),], cl = Y.train, k = k)
#predicted_labels <- knn(train = a[1:ntr,], test = a[1:ntr,], cl = Y.train, k = k)
return(sum(Y.test==predicted_labels)/length(Y.test))
}
acc.eigen.simu.1 <- Eigenmaps.classifier(X.train = t(X.tra),Y.train = Y.tra,X.test = t(X.tra),Y.test = Y.tra,k = 10)
acc.eigen.simu.2 <- Eigenmaps.classifier(X.train = t(X.tra),Y.train = Y.tra,X.test = t(X.tra),Y.test = Y.tra,k = 20)
acc.eigen.simu.3 <- Eigenmaps.classifier(X.train = t(X.tra),Y.train = Y.tra,X.test = t(X.tra),Y.test = Y.tra,k = 40)
acc.eigen.simu.4 <- Eigenmaps.classifier(X.train = t(X.tra),Y.train = Y.tra,X.test = t(X.tra),Y.test = Y.tra,k = 80)
acc.eigen.t.simu.1 <- Eigenmaps.classifier(X.train = t(X.tra),Y.train = Y.tra,X.test = t(X.tes),Y.test = Y.tes,k = 10)
acc.eigen.t.simu.2 <- Eigenmaps.classifier(X.train = t(X.tra),Y.train = Y.tra,X.test = t(X.tes),Y.test = Y.tes,k = 20)
acc.eigen.t.simu.3 <- Eigenmaps.classifier(X.train = t(X.tra),Y.train = Y.tra,X.test = t(X.tes),Y.test = Y.tes,k = 40)
acc.eigen.t.simu.4 <- Eigenmaps.classifier(X.train = t(X.tra),Y.train = Y.tra,X.test = t(X.tes),Y.test = Y.tes,k = 80)
########DIMENSION FOLDING#####
DF.classifier <- function(X.train,Y.train,X.test,Y.test,index,p,h,epsilon,iteration,pl,pr,dl,dr,k){
result <- df(X = X.train,Y = Y.train,index = index,p = p,h = h,epsilon = epsilon,iteration = iteration,pl = pl,pr = pr,dl = dl,dr = dr)
a <- result[[1]]
b <- result[[2]]
f <- result[[3]]
#####KNN######
Xn.test1 <- matrix(data = 0,nrow = dl*dr,ncol = ncol(X.test))
for (i in 1:ncol(Xn.test1)) {
Xn.test1[,i] <- matrix(data = t(a)%*%matrix(X.test[,i],nrow = pl,ncol = pr)%*%b,nrow = dl*dr)
}
Xn.train1 <- matrix(data = 0,nrow = dl*dr,ncol = ncol(X.train))
for (i in 1:ncol(Xn.train1)) {
Xn.train1[,i] <- matrix(data = t(a)%*%matrix(X.train[,i],nrow = pl,ncol = pr)%*%b,nrow = dl*dr)
}
predicted_labels.df <- knn(train = t(Xn.train1), test = t(Xn.test1), cl = Y.train, k = k)
#print(predicted_labels.df)
return(sum(Y.test==predicted_labels.df)/length(Y.test))
}
######
pl <- 2
pr <- 10
dl <- 2
dr <- 2
h <- 2
p.t <- array(data = 0,dim = h)
index <- list()
for (i in 0:1) {
p.t[i+1] <- sum(Y.tra==i)/length(Y.tra)
index[[i+1]] <- which(Y.tra== i)
}
epsilon <- 1e-9
acc.df.simu.1 <- DF.classifier(X.train = t(X.tra),Y.train = Y.tra,X.test = t(X.tra),Y.test = Y.tra,
index = index,p = p.t,h = h,epsilon = epsilon,iteration = 1000,
pl = pl,pr = pr,dl = dl,dr = dr,k=10)
acc.df.simu.2 <- DF.classifier(X.train = t(X.tra),Y.train = Y.tra,X.test = t(X.tra),Y.test = Y.tra,
index = index,p = p.t,h = h,epsilon = epsilon,iteration = 1000,
pl = pl,pr = pr,dl = dl,dr = dr,k=20)
acc.df.simu.3 <- DF.classifier(X.train = t(X.tra),Y.train = Y.tra,X.test = t(X.tra),Y.test = Y.tra,
index = index,p = p.t,h = h,epsilon = epsilon,iteration = 1000,
pl = pl,pr = pr,dl = dl,dr = dr,k=40)
acc.df.simu.4 <- DF.classifier(X.train = t(X.tra),Y.train = Y.tra,X.test = t(X.tra),Y.test = Y.tra,
index = index,p = p.t,h = h,epsilon = epsilon,iteration = 1000,
pl = pl,pr = pr,dl = dl,dr = dr,k=80)
acc.df.t.simu.1 <- DF.classifier(X.train = t(X.tra),Y.train = Y.tra,X.test = t(X.tes),Y.test = Y.tes,
index = index,p = p.t,h = h,epsilon = epsilon,iteration = 1000,
pl = pl,pr = pr,dl = dl,dr = dr,k=10)
acc.df.t.simu.2 <- DF.classifier(X.train = t(X.tra),Y.train = Y.tra,X.test = t(X.tes),Y.test = Y.tes,
index = index,p = p.t,h = h,epsilon = epsilon,iteration = 1000,
pl = pl,pr = pr,dl = dl,dr = dr,k=20)
acc.df.t.simu.3 <- DF.classifier(X.train = t(X.tra),Y.train = Y.tra,X.test = t(X.tes),Y.test = Y.tes,
index = index,p = p.t,h = h,epsilon = epsilon,iteration = 1000,
pl = pl,pr = pr,dl = dl,dr = dr,k=40)
acc.df.t.simu.4 <- DF.classifier(X.train = t(X.tra),Y.train = Y.tra,X.test = t(X.tes),Y.test = Y.tes,
index = index,p = p.t,h = h,epsilon = epsilon,iteration = 1000,
pl = pl,pr = pr,dl = dl,dr = dr,k=80)
########NONLINEAR DIMENSION FOLDING#################
pl <- 2
pr <- 10
dl <- 2
dr <- 2
re <- KernelGenerator(X = t(X.tra)[,1:20],Y = Y.tra[1:20],pl = pl,pr = pr,dl = dl,dr = dr,
thre = 0.01,iteration = 10,kernel.u = "gaussian",kernel.v = "gaussian",kernel.Y = "discrete")
A <- re$A
Gy <- re$Gy
Gu <- re$Gu
Gv <- re$Gv
epsilon_x <- 10^seq(-10,-4,1)
gcv_x <- array(data = 0,dim = length(epsilon_x))
for (i in 1:length(epsilon_x)) {
gcv_x[i] <- gcvx(As = A,GY = Gy,epsilon_x = epsilon_x[i])
}
epsilon.x <- epsilon_x[which.min(gcv_x)]
epsilon_u <- 10^seq(-3,1,0.5)
epsilon_v <- 10^seq(-3,1,0.5)
gcv_uv <- matrix(data = 0,nrow = length(epsilon_u),ncol = length(epsilon_v))
for (i in 1:length(epsilon_u)) {
for (j in 1:length(epsilon_v)) {
gcv_uv[i,j] <- gcvuv(As = A,Gu = Gu,Gv = Gv,GY = Gy,epsilon_x = epsilon.x,epsilon_u = epsilon_u[i],epsilon_v = epsilon_v[j])
}
}
epsilon.u <- epsilon_u[which(gcv_uv == min(gcv_uv), arr.ind = TRUE)[1]]
epsilon.v <- epsilon_v[which(gcv_uv == min(gcv_uv), arr.ind = TRUE)[2]]
###################################Classification##########################################
res <- NSPGSIR(X = t(X.tra) ,Y = Y.tra,pl = pl,pr = pr,dl = dl,dr = dr,
thre = 0.001,iteration = 10,kernel.u = "gaussian",kernel.v = "gaussian",kernel.Y = "discrete",
epsilon_u = epsilon.u,epsilon_v = epsilon.v,epsilon_x = epsilon.v)
f <- res$f
g <- res$g
X.train.d <- NSPGSIR.predict(X = t(X.tra),Y = Y.tra,X.new = t(X.tra),
pl = pl,pr = pr,dl = dl,dr = dr,f = f,g = g)
X.test.d <- NSPGSIR.predict(X = t(X.tra),Y = Y.tra,X.new = t(X.tes),
pl = pl,pr = pr,dl = dl,dr = dr,f = f,g = g)
label1 <- knn(train = t(X.train.d),test = t(X.train.d),cl = Y.tra,k = 10)
acc.ndf.simu.1 <- sum(label1 == Y.tra)/length(Y.tra)
label2 <- knn(train = t(X.train.d),test = t(X.train.d),cl = Y.tra,k = 20)
acc.ndf.simu.2 <- sum(label2 == Y.tra)/length(Y.tra)
label3 <- knn(train = t(X.train.d),test = t(X.train.d),cl = Y.tra,k = 40)
acc.ndf.simu.3 <- sum(label3 == Y.tra)/length(Y.tra)
label4 <- knn(train = t(X.train.d),test = t(X.train.d),cl = Y.tra,k = 80)
acc.ndf.simu.4 <- sum(label4 == Y.tra)/length(Y.tra)
label1.t <- knn(train = t(X.train.d),test = t(X.test.d),cl = Y.tra,k = 10)
acc.ndf.t.simu.1 <- sum(label1.t == Y.tes)/length(Y.tes)
label2.t <- knn(train = t(X.train.d),test = t(X.test.d),cl = Y.tra,k = 20)
acc.ndf.t.simu.2 <- sum(label2.t == Y.tes)/length(Y.tes)
label3.t <- knn(train = t(X.train.d),test = t(X.test.d),cl = Y.tra,k = 40)
acc.ndf.t.simu.3 <- sum(label3.t == Y.tes)/length(Y.tes)
label4.t <- knn(train = t(X.train.d),test = t(X.test.d),cl = Y.tra,k = 80)
acc.ndf.t.simu.4 <- sum(label4.t == Y.tes)/length(Y.tes)
acc[k,] <- c(acc.umap.simu.1,acc.umap.simu.2,acc.umap.simu.3,acc.umap.simu.4,
acc.umap.t.simu.1,acc.umap.t.simu.2,acc.umap.t.simu.3,acc.umap.t.simu.4,
acc.tsne.simu.1,acc.tsne.simu.2,acc.tsne.simu.3,acc.tsne.simu.4,
acc.tsne.t.simu.1,acc.tsne.t.simu.2,acc.tsne.t.simu.3,acc.tsne.t.simu.4,
acc.pca.simu.1,acc.pca.simu.2,acc.pca.simu.3,acc.pca.simu.4,
acc.pca.t.simu.1,acc.pca.t.simu.2,acc.pca.t.simu.3,acc.umap.t.simu.4,
acc.eigen.simu.1,acc.eigen.simu.2,acc.eigen.simu.3,acc.eigen.simu.4,
acc.eigen.t.simu.1,acc.eigen.t.simu.2,acc.eigen.t.simu.3,acc.eigen.t.simu.4,
acc.df.simu.1,acc.df.simu.2,acc.df.simu.3,acc.df.simu.4,
acc.df.t.simu.1,acc.df.t.simu.2,acc.df.t.simu.3,acc.df.t.simu.4,
acc.ndf.simu.1,acc.ndf.simu.2,acc.ndf.simu.3,acc.ndf.simu.4,
acc.ndf.t.simu.1,acc.ndf.t.simu.2,acc.ndf.t.simu.3,acc.ndf.t.simu.4)
print(k)
}
remove.packages("Rcpp")
remove.packages("RcppArmadillo")
install.packages("Rcpp")
install.packages("RcppArmadillo")
library(Rcpp)
library(RcppArmadillo)
export LDFLAGS=-L/opt/homebrew/lib/gcc/X.X  # 替换 X.X 为实际的 GCC 版本号
export LDFLAGS=-L/opt/homebrew/lib/gcc/14
Iq
!q
quit()
remove.packages("Rcpp")
remove.packages("RcppArmadillo")
install.packages("Rcpp")
install.packages("RcppArmadillo")
remove.packages("Rcpp")
remove.packages("RcppArmadillo")
install.packages("Rcpp",type = "source")
install.packages("RcppArmadillo",type = "source")
source
remove.packages("RcppArmadillo")
quit()
remove.packages("RcppArmadillo")
remove.packages("Rcpp")
install.package("Rcpp",type= "source")
install.packages("Rcpp",type= "source")
install.packages("RcppArmadillo",type="source")
quit()
